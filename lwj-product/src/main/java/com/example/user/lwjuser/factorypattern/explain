简单工厂模式：
    指由一个工厂对子那个决定创建哪一种产品类的实例，适用于工厂类负责创建的对象较少的场景，客户端只需要传入工厂类的参数，
    对于如何创建对象不关心

工厂方法模式：
    指定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类，该模式让类的实例化推迟到子类中进行，
    用户只需要关心所需产品所对应的工厂，不需要关心创建细节，且加入新的产品时符合开闭原则（对扩展开放，对修改关闭）；
    主要解决产品扩展问题。
    适用场景：
    1）创建对象需要大量重复的代码
    2）应用层不依赖于产品实例如何被创建、如何被实现等细节
    3）一个类通过其子类指定创建哪个对象
    缺点：
    1）类的个数容易过多，增加复杂度
    2）增加了系统的抽象性和理解难度

抽象工厂模式：
    指提供一个创建一系列相关或者互相依赖对象的接口，无需指定他们的具体类。
    应用层不依赖于产品实例如何被创建、如何被实现等细节，强调的是一系列相关的产品对象（属于同个产品族）。
    需要提供一个产品类的库，所有的产品以同样的接口实现，从而使客户端不依赖于具体的实现。
    产品族：一家企业生产的所有类型的家用电器。产品等级结构：所有厂家生产的同一种家用电器